<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - 分类 - 锦枫紫兰</title>
        <link>/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - 分类 - 锦枫紫兰</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 27 Oct 2021 16:05:30 &#43;0800</lastBuildDate><atom:link href="/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>跨设备（嵌入式-PC）</title>
    <link>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-6-%E8%B7%A8%E8%AE%BE%E5%A4%87/</link>
    <pubDate>Wed, 27 Oct 2021 16:05:30 &#43;0800</pubDate><guid>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-6-%E8%B7%A8%E8%AE%BE%E5%A4%87/</guid>
    <description><![CDATA[C++ 1. 空间和效率的平衡 在嵌入式开发中，单纯地加入class，不会影响代码的大小，也不会影响程序的效率。 默认参数和函数重载也不会带来代码大小和运]]></description>
</item>
<item>
    <title>设计模式-行为型</title>
    <link>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4-%E8%A1%8C%E4%B8%BA%E5%9E%8B/</link>
    <pubDate>Sat, 29 Aug 2020 12:00:19 &#43;0000</pubDate><guid>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4-%E8%A1%8C%E4%B8%BA%E5%9E%8B/</guid>
    <description><![CDATA[1. 行为型 创建型设计模式主要解决“对象的创建”问题，结构型设计模式主要解决“类或对象的组合或组装”问题，那行为型设计模式主要解决的就是“类或对]]></description>
</item>
<item>
    <title>设计模式-结构型</title>
    <link>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3-%E7%BB%93%E6%9E%84%E5%9E%8B/</link>
    <pubDate>Sat, 29 Aug 2020 11:59:59 &#43;0000</pubDate><guid>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3-%E7%BB%93%E6%9E%84%E5%9E%8B/</guid>
    <description><![CDATA[1. 结构型 结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。 常用的有：代理模式、桥接模式、装饰者]]></description>
</item>
<item>
    <title>设计模式-思想-原则</title>
    <link>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1-%E6%80%9D%E6%83%B3-%E5%8E%9F%E5%88%99/</link>
    <pubDate>Mon, 15 Jul 2019 14:25:07 &#43;0000</pubDate><guid>/post/program-%E8%B7%A8%E8%AF%AD%E8%A8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1-%E6%80%9D%E6%83%B3-%E5%8E%9F%E5%88%99/</guid>
    <description><![CDATA[摘自《极客时间x王争|设计模式之美》 1. 解决的问题 1.1. 提高代码质量 解决命名不规范、类设计不合理、分层不清晰、没有模块化概念、代码结构混乱、高度耦]]></description>
</item>
</channel>
</rss>
